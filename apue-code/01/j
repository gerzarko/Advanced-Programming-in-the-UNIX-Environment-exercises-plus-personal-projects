[4mfopen[24m(3)                                                  Library Functions Manual                                                 [4mfopen[24m(3)

[1mNAME[0m
       fopen, fdopen, freopen - stream open functions

[1mLIBRARY[0m
       Standard C library ([4mlibc[24m, [4m-lc[24m)

[1mSYNOPSIS[0m
       [1m#include <stdio.h>[0m

       [1mFILE *fopen(const char *restrict [4m[22mpath[24m[1m, const char *restrict [4m[22mmode[24m[1m);[0m
       [1mFILE *fdopen(int [4m[22mfd[24m[1m, const char *[4m[22mmode[24m[1m);[0m
       [1mFILE *freopen(const char *restrict [4m[22mpath[24m[1m, const char *restrict [4m[22mmode[24m[1m,[0m
                     [1mFILE *restrict [4m[22mstream[24m[1m);[0m

   Feature Test Macro Requirements for glibc (see [1mfeature_test_macros[22m(7)):

       [1mfdopen[22m():
           _POSIX_C_SOURCE

[1mDESCRIPTION[0m
       The [1mfopen[22m() function opens the file whose name is the string pointed to by [4mpath[24m and associates a stream with it.

       The  argument  [4mmode[24m points to a string beginning with one of the following sequences (possibly followed by additional characters, as
       described below):

       [1mr      [22mOpen text file for reading.  The stream is positioned at the beginning of the file.

       [1mr+     [22mOpen for reading and writing.  The stream is positioned at the beginning of the file.

       [1mw      [22mTruncate file to zero length or create text file for writing.  The stream is positioned at the beginning of the file.

       [1mw+     [22mOpen for reading and writing.  The file is created if it does not exist, otherwise it is truncated.  The stream is positioned
              at the beginning of the file.

       [1ma      [22mOpen for appending (writing at end of file).  The file is created if it does not exist.  The stream is positioned at the  end
              of the file.

       [1ma+     [22mOpen  for  reading  and  appending (writing at end of file).  The file is created if it does not exist.  Output is always ap‐
              pended to the end of the file.  POSIX is silent on what the initial read position is when using this mode.   For  glibc,  the
              initial  file  position for reading is at the beginning of the file, but for Android/BSD/MacOS, the initial file position for
              reading is at the end of the file.

       The [4mmode[24m string can also include the letter 'b' either as a last character or as a character between the characters in  any  of  the
       two-character  strings  described above.  This is strictly for compatibility with ISO C and has no effect; the 'b' is ignored on all
       POSIX conforming systems, including Linux.  (Other systems may treat text files and binary files differently, and adding the 'b' may
       be a good idea if you do I/O to a binary file and expect that your program may be ported to non-UNIX environments.)

       See NOTES below for details of glibc extensions for [4mmode[24m.

       Any created file will have the mode [1mS_IRUSR [22m| [1mS_IWUSR [22m| [1mS_IRGRP [22m| [1mS_IWGRP [22m| [1mS_IROTH [22m| [1mS_IWOTH [22m(0666), as modified by  the  process's
       umask value (see [1mumask[22m(2)).

       Reads  and  writes may be intermixed on read/write streams in any order.  Note that ANSI C requires that a file positioning function
       intervene between output and input, unless an input operation encounters end-of-file.  (If this condition is not met, then a read is
       allowed to return the result of writes other than the most recent.)  Therefore it is good practice (and indeed  sometimes  necessary
       under  Linux)  to put an [1mfseek[22m(3) or [1mfsetpos[22m(3) operation between write and read operations on such a stream.  This operation may be
       an apparent no-op (as in [4mfseek(...,[24m [4m0L,[24m [4mSEEK_CUR)[24m called for its synchronizing side effect).

       Opening a file in append mode ([1ma [22mas the first character of [4mmode[24m) causes all subsequent write operations to this stream to  occur  at
       end-of-file, as if preceded by the call:

           fseek(stream, 0, SEEK_END);

       The file descriptor associated with the stream is opened as if by a call to [1mopen[22m(2) with the following flags:
              ┌──────────────┬───────────────────────────────┐
              │ [1mfopen() mode [22m│ [1mopen() flags                  [22m│
              ├──────────────┼───────────────────────────────┤
              │      [4mr[24m       │ O_RDONLY                      │
              ├──────────────┼───────────────────────────────┤
              │      [4mw[24m       │ O_WRONLY | O_CREAT | O_TRUNC  │
              ├──────────────┼───────────────────────────────┤
              │      [4ma[24m       │ O_WRONLY | O_CREAT | O_APPEND │
              ├──────────────┼───────────────────────────────┤
              │      [4mr+[24m      │ O_RDWR                        │
              ├──────────────┼───────────────────────────────┤
              │      [4mw+[24m      │ O_RDWR | O_CREAT | O_TRUNC    │
              ├──────────────┼───────────────────────────────┤
              │      [4ma+[24m      │ O_RDWR | O_CREAT | O_APPEND   │
              └──────────────┴───────────────────────────────┘

   [1mfdopen()[0m
       The  [1mfdopen[22m()  function  associates  a stream with the existing file descriptor, [4mfd[24m.  The [4mmode[24m of the stream (one of the values "r",
       "r+", "w", "w+", "a", "a+") must be compatible with the mode of the file descriptor.  The file position indicator of the new  stream
       is  set to that belonging to [4mfd[24m, and the error and end-of-file indicators are cleared.  Modes "w" or "w+" do not cause truncation of
       the file.  The file descriptor is not dup'ed, and will be closed when the stream created by [1mfdopen[22m() is closed.  The result  of  ap‐
       plying [1mfdopen[22m() to a shared memory object is undefined.

   [1mfreopen()[0m
       The  [1mfreopen[22m()  function  opens  the file whose name is the string pointed to by [4mpath[24m and associates the stream pointed to by [4mstream[0m
       with it.  The original stream (if it exists) is closed.  The [4mmode[24m argument is used just as in the [1mfopen[22m() function.

       If [4mpath[24m is a null pointer, [1mfreopen[22m() changes the mode of the stream to that specified in [4mmode[24m; that is, [1mfreopen[22m() reopens the  path‐
       name that is associated with the stream.  The specification for this behavior was added in the C99 standard, which says:

              In this case, the file descriptor associated with the stream need not be closed if the call to [1mfreopen[22m() succeeds.  It is im‐
              plementation-defined which changes of mode are permitted (if any), and under what circumstances.

       The primary use of the [1mfreopen[22m() function is to change the file associated with a standard text stream ([4mstderr[24m, [4mstdin[24m, or [4mstdout[24m).

[1mRETURN VALUE[0m
       Upon  successful completion [1mfopen[22m(), [1mfdopen[22m(), and [1mfreopen[22m() return a [4mFILE[24m pointer.  Otherwise, NULL is returned and [4merrno[24m is set to
       indicate the error.

[1mERRORS[0m
       [1mEINVAL [22mThe [4mmode[24m provided to [1mfopen[22m(), [1mfdopen[22m(), or [1mfreopen[22m() was invalid.

       The [1mfopen[22m(), [1mfdopen[22m(), and [1mfreopen[22m() functions may also fail and set [4merrno[24m for any of the errors  specified  for  the  routine  [1mmal‐[0m
       [1mloc[22m(3).

       The [1mfopen[22m() function may also fail and set [4merrno[24m for any of the errors specified for the routine [1mopen[22m(2).

       The [1mfdopen[22m() function may also fail and set [4merrno[24m for any of the errors specified for the routine [1mfcntl[22m(2).

       The  [1mfreopen[22m()  function  may  also  fail  and  set  [4merrno[24m  for any of the errors specified for the routines [1mopen[22m(2), [1mfclose[22m(3), and
       [1mfflush[22m(3).

[1mATTRIBUTES[0m
       For an explanation of the terms used in this section, see [1mattributes[22m(7).
       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │ [1mInterface                                                                                              [22m│ [1mAttribute     [22m│ [1mValue   [22m│
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │ [1mfopen[22m(), [1mfdopen[22m(), [1mfreopen[22m()                                                                           │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

[1mSTANDARDS[0m
       [1mfopen[22m()
       [1mfreopen[22m()
              C11, POSIX.1-2008.

       [1mfdopen[22m()
              POSIX.1-2008.

[1mHISTORY[0m
       [1mfopen[22m()
       [1mfreopen[22m()
              POSIX.1-2001, C89.

       [1mfdopen[22m()
              POSIX.1-2001.

[1mNOTES[0m
   [1mglibc notes[0m
       The GNU C library allows the following extensions for the string specified in [4mmode[24m:

       [1mc [22m(since glibc 2.3.3)
              Do not make the open operation, or subsequent read and write operations, thread cancelation points.  This flag is ignored for
              [1mfdopen[22m().

       [1me [22m(since glibc 2.7)
              Open the file with the [1mO_CLOEXEC [22mflag.  See [1mopen[22m(2) for more information.  This flag is ignored for [1mfdopen[22m().

       [1mm [22m(since glibc 2.3)
              Attempt to access the file using [1mmmap[22m(2), rather than I/O system calls ([1mread[22m(2), [1mwrite[22m(2)).  Currently, use of [1mmmap[22m(2) is at‐
              tempted only for a file opened for reading.

       [1mx      [22mOpen the file exclusively (like the [1mO_EXCL [22mflag of [1mopen[22m(2)).  If the file already exists, [1mfopen[22m() fails, and  sets  [4merrno[24m  to
              [1mEEXIST[22m.  This flag is ignored for [1mfdopen[22m().

       In addition to the above characters, [1mfopen[22m() and [1mfreopen[22m() support the following syntax in [4mmode[24m:

           [1m,ccs=[4m[22mstring[0m

       The given [4mstring[24m is taken as the name of a coded character set and the stream is marked as wide-oriented.  Thereafter, internal con‐
       version  functions convert I/O to and from the character set [4mstring[24m.  If the [1m,ccs=[4m[22mstring[24m syntax is not specified, then the wide-ori‐
       entation of the stream is determined by the first file operation.  If that operation is a wide-character operation,  the  stream  is
       marked wide-oriented, and functions to convert to the coded character set are loaded.

[1mBUGS[0m
       When  parsing for individual flag characters in [4mmode[24m (i.e., the characters preceding the "ccs" specification), the glibc implementa‐
       tion of [1mfopen[22m() and [1mfreopen[22m() limits the number of characters examined in [4mmode[24m to 7 (or, before glibc 2.14,  to  6,  which  was  not
       enough to include possible specifications such as "rb+cmxe").  The current implementation of [1mfdopen[22m() parses at most 5 characters in
       [4mmode[24m.

[1mSEE ALSO[0m
       [1mopen[22m(2), [1mfclose[22m(3), [1mfileno[22m(3), [1mfmemopen[22m(3), [1mfopencookie[22m(3), [1mopen_memstream[22m(3)

Linux man-pages 6.14                                             2025-05-06                                                        [4mfopen[24m(3)
